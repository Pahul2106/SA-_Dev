package graphe;

import java.util.ArrayList;
import java.util.List;

public class GrapheLArcs extends groupe {
    private List<Arc> arcs;

    public GrapheLArcs() {
        arcs = new ArrayList<Arc>();
    }

    @Override
    public void ajouterSommet(String noeud) {
        // rien à faire si le sommet est déjà présent
        if (!contientSommet(noeud)) {
            // ajoute un arc factice vers le sommet vide
            arcs.add(new Arc(noeud, "", 0));
        }
    }

    @Override
    public void ajouterArc(String source, String destination, Integer valeur) {
        // vérifie que l'arc n'existe pas déjà
    	try {
		    // code that may throw the IllegalArgumentException
			if (contientArc(source, destination)) {
				throw new IllegalArgumentException("L'arc (" + source + "->" + destination + ") existe déjà.");
			}
			else {
				ajouterSommet(source);
		        ajouterSommet(destination);
		        try {
				    // code that may throw the IllegalArgumentException

					if(contientArc(source, destination)) {
						throw new IllegalArgumentException("Arc existe déjà");
					}
					else {
						arcs.add(new Arc(source, destination, valeur));
					}
				} catch (IllegalArgumentException e) {
				    throw e;
				}
			}
		} catch (IllegalArgumentException e) {
		    throw e;
		}        
    }

    @Override
    public void oterSommet(String noeud) {
        // supprime tous les arcs qui ont ce sommet comme source ou destination
        List<Arc> arcsASupprimer = new ArrayList<Arc>();
        for (Arc arc : arcs) {
            if (arc.getSource().equals(noeud) || arc.getDestination().equals(noeud)) {
                arcsASupprimer.add(arc);
            }
        }
        arcs.removeAll(arcsASupprimer);
    }

    @Override
    public void oterArc(String source, String destination) {
        // vérifie que l'arc existe
    	try {
		    // code that may throw the IllegalArgumentException
			if (contientArc(source, destination)) {
				throw new IllegalArgumentException("L'arc (" + source + "->" + destination + ") n'existe pas.");
			}
			else {
				arcs.remove(new Arc(source, destination, 0));
			}
		} catch (IllegalArgumentException e) {
		    throw e;
		}
    }

    @Override
    public List<String> getSommets() {
        List<String> sommets = new ArrayList<String>();
        for (Arc arc : arcs) {
            if (!sommets.contains(arc.getSource())) {
                sommets.add(arc.getSource());
            }
            if (!sommets.contains(arc.getDestination())) {
                sommets.add(arc.getDestination());
            }
        }
        return sommets;
    }

    
    @Override
    public boolean contientArc(String source, String destination) {
        return arcs.contains(new Arc(source, destination, 0));
    }

	@Override
	public List<String> getSucc(String sommet) {
		List<String> successeurs = new ArrayList<String>();
	    for (Arc arc : arcs) {
	        if (arc.getSource().equals(sommet)) {
	            successeurs.add(arc.getDestination());
	        }
	    }
	    return successeurs;
	}

	@Override
	public int getValuation(String src, String dest) {
		for (Arc arc : arcs) {
	        if (arc.getSource().equals(src) && arc.getDestination().equals(dest)) {
	            return arc.getValuation();
	        }
	    }
		return -1; // si l'arc n'existe pas
	}

	@Override
	public boolean contientSommet(String sommet) {
		for (Arc arc : arcs) {
	        if (arc.getSource().equals(sommet) || arc.getDestination().equals(sommet)) {
	            return true;
	        }
	    }
	    return false;
	}
}
